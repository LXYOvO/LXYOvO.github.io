{
    "version": "https://jsonfeed.org/version/1",
    "title": "云迹",
    "subtitle": "無限進步",
    "icon": "https://lxyovo.top/images/favicon.ico",
    "description": "",
    "home_page_url": "https://lxyovo.top",
    "items": [
        {
            "id": "https://lxyovo.top/2021-07-15-02.Python",
            "url": "https://lxyovo.top/2021-07-15-02.Python",
            "title": "02-语音元素",
            "date_published": "2021-07-15T08:30:00.000Z",
            "content_html": "<h4 id=\"指令和程序\"><a class=\"anchor\" href=\"#指令和程序\">#</a> 指令和程序</h4>\n<p>计算机的硬件系统通常由五大部件构成，包括：运算器、控制器、存储器、输入设备和输出设备。其中，运算器和控制器放在一起就是我们通常所说的中央处理器，它的功能是执行各种运算和控制指令以及处理计算机软件中的数据。我们通常所说的程序实际上就是指令的集合，我们程序就是将一系列的指令按照某种方式组织到一起，然后通过这些指令去控制计算机做我们想让它做的事情。今天我们大多数时候使用的计算机，虽然它们的元器件做工越来越精密，处理能力越来越强大，但究其本质来说仍然属于<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU1JTg2JUFGJUMyJUI3JUU4JUFGJUJBJUU0JUJDJThBJUU2JTlCJUJDJUU3JUJCJTkzJUU2JTlFJTg0\"> “冯・诺依曼结构”</span> 的计算机。“冯・诺依曼结构” 有两个关键点，一是指出要将存储设备与中央处理器分开，二是提出了将数据以二进制方式编码。二进制是一种 “逢二进一” 的计数法，跟我们人类使用的 “逢十进一” 的计数法没有实质性的区别，人类因为有十根手指所以使用了十进制（因为在数数时十根手指用完之后就只能进位了，当然凡事都有例外，玛雅人可能是因为长年光着脚的原因把脚趾头也算上了，于是他们使用了二十进制的计数法，在这种计数法的指导下玛雅人的历法就与我们平常使用的历法不一样，而按照玛雅人的历法，2012 年是上一个所谓的 “太阳纪” 的最后一年，而 2013 年则是新的 “太阳纪” 的开始，后来这件事情被以讹传讹的方式误传为”2012 年是玛雅人预言的世界末日 “这种荒诞的说法，今天我们可以大胆的猜测，玛雅文明之所以发展缓慢估计也与使用了二十进制有关）。对于计算机来说，二进制在物理器件上来说是最容易实现的（高电压表示 1，低电压表示 0），于是在 “冯・诺依曼结构” 的计算机都使用了二进制。虽然我们并不需要每个程序员都能够使用二进制的思维方式来工作，但是了解二进制以及它与我们生活中的十进制之间的转换关系，以及二进制与八进制和十六进制的转换关系还是有必要的。如果你对这一点不熟悉，可以自行使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU0JUJBJThDJUU4JUJGJTlCJUU1JTg4JUI2\">维基百科</span>或者<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20=\">百度百科</span>科普一下。</p>\n<blockquote>\n<p><strong>说明</strong>：近期关于<strong>量子计算机</strong>的研究已经被推倒了风口浪尖，量子计算机基于量子力学进行运算，使用量子瞬移的方式来传递信息。2018 年 6 月，Intel 宣布开发出新款量子芯片并通过了在接近绝对零度环境下的测试；2019 年，IBM 和 Google 都推出了自己的量子计算机。</p>\n</blockquote>\n<h3 id=\"变量和类型\"><a class=\"anchor\" href=\"#变量和类型\">#</a> 变量和类型</h3>\n<p>在程序设计中，变量是一种存储数据的载体。计算机中的变量是实际存在的数据或者说是存储器中存储数据的一块内存空间，变量的值可以被读取和修改，这是所有计算和控制的基础。计算机能处理的数据有很多种类型，除了数值之外还可以处理文本、图形、音频、视频等各种各样的数据，那么不同的数据就需要定义不同的存储类型。Python 中的数据类型很多，而且也允许我们自定义新的数据类型（这一点在后面会讲到），我们先介绍几种常用的数据类型。</p>\n<ul>\n<li>整型：Python 中可以处理任意大小的整数（Python 2.x 中有 <code>int</code>  和 <code>long</code>  两种类型的整数，但这种区分对 Python 来说意义不大，因此在 Python 3.x 中整数只有 int 这一种了），而且支持二进制（如 <code>0b100</code> ，换算成十进制是 4）、八进制（如 <code>0o100</code> ，换算成十进制是 64）、十进制（ <code>100</code> ）和十六进制（ <code>0x100</code> ，换算成十进制是 256）的表示法。</li>\n<li>浮点型：浮点数也就是小数，之所以称为浮点数，是因为按照科学记数法表示时，一个浮点数的小数点位置是可变的，浮点数除了数学写法（如 <code>123.456</code> ）之外还支持科学计数法（如 <code>1.23456e2</code> ）。</li>\n<li>字符串型：字符串是以单引号或双引号括起来的任意文本，比如 <code>'hello'</code>  和 <code>&quot;hello&quot;</code> , 字符串还有原始字符串表示法、字节字符串表示法、Unicode 字符串表示法，而且可以书写成多行的形式（用三个单引号或三个双引号开头，三个单引号或三个双引号结尾）。</li>\n<li>布尔型：布尔值只有 <code>True</code> 、 <code>False</code>  两种值，要么是 <code>True</code> ，要么是 <code>False</code> ，在 Python 中，可以直接用 <code>True</code> 、 <code>False</code>  表示布尔值（请注意大小写），也可以通过布尔运算计算出来（例如 <code>3 &lt; 5</code>  会产生布尔值 <code>True</code> ，而 <code>2 == 1</code>  会产生布尔值 <code>False</code> ）。</li>\n<li>复数型：形如 <code>3+5j</code> ，跟数学上的复数表示一样，唯一不同的是虚部的 <code>i</code>  换成了 <code>j</code> 。实际上，这个类型并不常用，大家了解一下就可以了。</li>\n</ul>\n<h4 id=\"变量命名\"><a class=\"anchor\" href=\"#变量命名\">#</a> 变量命名</h4>\n<p>对于每个变量我们需要给它取一个名字，就如同我们每个人都有属于自己的响亮的名字一样。在 Python 中，变量命名需要遵循以下这些必须遵守硬性规则和强烈建议遵守的非硬性规则。</p>\n<ul>\n<li>硬性规则：\n<ul>\n<li>变量名由字母（广义的 Unicode 字符，不包括特殊字符）、数字和下划线构成，数字不能开头。</li>\n<li>大小写敏感（大写的 <code>a</code>  和小写的 <code>A</code>  是两个不同的变量）。</li>\n<li>不要跟关键字（有特殊含义的单词，后面会讲到）和系统保留字（如函数、模块等的名字）冲突。</li>\n</ul>\n</li>\n<li>PEP 8 要求：\n<ul>\n<li>用小写字母拼写，多个单词用下划线连接。</li>\n<li>受保护的实例属性用单个下划线开头（后面会讲到）。</li>\n<li>私有的实例属性用两个下划线开头（后面会讲到）。</li>\n</ul>\n</li>\n</ul>\n<p>当然，作为一个专业的程序员，给变量（事实上应该是所有的标识符）命名时做到见名知意也是非常重要的。</p>\n<h4 id=\"变量的使用\"><a class=\"anchor\" href=\"#变量的使用\">#</a> 变量的使用</h4>\n<p>下面通过几个例子来说明变量的类型和变量使用。</p>\n<pre><code class=\"language-Python\">&quot;&quot;&quot;\n使用变量保存数据并进行加减乘除运算\n\nVersion: 0.1\nAuthor: 骆昊\n&quot;&quot;&quot;\na = 321\nb = 12\nprint(a + b)    # 333\nprint(a - b)    # 309\nprint(a * b)    # 3852\nprint(a / b)    # 26.75\n</code></pre>\n<p>在 Python 中可以使用 <code>type</code>  函数对变量的类型进行检查。程序设计中函数的概念跟数学上函数的概念是一致的，数学上的函数相信大家并不陌生，它包括了函数名、自变量和因变量。如果暂时不理解这个概念也不要紧，我们会在后续的章节中专门讲解函数的定义和使用。</p>\n<pre><code class=\"language-Python\">&quot;&quot;&quot;\n使用type()检查变量的类型\n\nVersion: 0.1\nAuthor: 骆昊\n&quot;&quot;&quot;\na = 100\nb = 12.345\nc = 1 + 5j\nd = 'hello, world'\ne = True\nprint(type(a))    # &lt;class 'int'&gt;\nprint(type(b))    # &lt;class 'float'&gt;\nprint(type(c))    # &lt;class 'complex'&gt;\nprint(type(d))    # &lt;class 'str'&gt;\nprint(type(e))    # &lt;class 'bool'&gt;\n</code></pre>\n<p>可以使用 Python 中内置的函数对变量类型进行转换。</p>\n<ul>\n<li><code>int()</code> ：将一个数值或字符串转换成整数，可以指定进制。</li>\n<li><code>float()</code> ：将一个字符串转换成浮点数。</li>\n<li><code>str()</code> ：将指定的对象转换成字符串形式，可以指定编码。</li>\n<li><code>chr()</code> ：将整数转换成该编码对应的字符串（一个字符）。</li>\n<li><code>ord()</code> ：将字符串（一个字符）转换成对应的编码（整数）。</li>\n</ul>\n<p>下面的代码通过键盘输入两个整数来实现对两个整数的算术运算。</p>\n<pre><code class=\"language-Python\">&quot;&quot;&quot;\n使用input()函数获取键盘输入(字符串)\n使用int()函数将输入的字符串转换成整数\n使用print()函数输出带占位符的字符串\n\nVersion: 0.1\nAuthor: 骆昊\n&quot;&quot;&quot;\na = int(input('a = '))\nb = int(input('b = '))\nprint('%d + %d = %d' % (a, b, a + b))\nprint('%d - %d = %d' % (a, b, a - b))\nprint('%d * %d = %d' % (a, b, a * b))\nprint('%d / %d = %f' % (a, b, a / b))\nprint('%d // %d = %d' % (a, b, a // b))\nprint('%d %% %d = %d' % (a, b, a % b))\nprint('%d ** %d = %d' % (a, b, a ** b))\n</code></pre>\n<blockquote>\n<p><strong>说明</strong>：上面的 print 函数中输出的字符串使用了占位符语法，其中 <code>%d</code>  是整数的占位符， <code>%f</code>  是小数的占位符， <code>%%</code>  表示百分号（因为百分号代表了占位符，所以带占位符的字符串中要表示百分号必须写成 <code>%%</code> ），字符串之后的 <code>%</code>  后面跟的变量值会替换掉占位符然后输出到终端中，运行上面的程序，看看程序执行结果就明白啦。</p>\n</blockquote>\n<h3 id=\"运算符\"><a class=\"anchor\" href=\"#运算符\">#</a> 运算符</h3>\n<p>Python 支持多种运算符，下表大致按照优先级从高到低的顺序列出了所有的运算符，运算符的优先级指的是多个运算符同时出现时，先做什么运算然后再做什么运算。除了我们之前已经用过的赋值运算符和算术运算符，我们稍后会陆续讲到其他运算符的使用。</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>[]</code>   <code>[:]</code></td>\n<td>下标，切片</td>\n</tr>\n<tr>\n<td><code>**</code></td>\n<td>指数</td>\n</tr>\n<tr>\n<td><code>~</code>   <code>+</code>   <code>-</code></td>\n<td>按位取反，正负号</td>\n</tr>\n<tr>\n<td><code>*</code>   <code>/</code>   <code>%</code>   <code>//</code></td>\n<td>乘，除，模，整除</td>\n</tr>\n<tr>\n<td><code>+</code>   <code>-</code></td>\n<td>加，减</td>\n</tr>\n<tr>\n<td><code>&gt;&gt;</code>   <code>&lt;&lt;</code></td>\n<td>右移，左移</td>\n</tr>\n<tr>\n<td><code>&amp;</code></td>\n<td>按位与</td>\n</tr>\n<tr>\n<td><code>^</code>   <code>\\|</code></td>\n<td>按位异或，按位或</td>\n</tr>\n<tr>\n<td><code>&lt;=</code>   <code>&lt;</code>   <code>&gt;</code>   <code>&gt;=</code></td>\n<td>小于等于，小于，大于，大于等于</td>\n</tr>\n<tr>\n<td><code>==</code>   <code>!=</code></td>\n<td>等于，不等于</td>\n</tr>\n<tr>\n<td><code>is</code>    <code>is not</code></td>\n<td>身份运算符</td>\n</tr>\n<tr>\n<td><code>in</code>   <code>not in</code></td>\n<td>成员运算符</td>\n</tr>\n<tr>\n<td><code>not</code>   <code>or</code>   <code>and</code></td>\n<td>逻辑运算符</td>\n</tr>\n<tr>\n<td><code>=</code>   <code>+=</code>   <code>-=</code>   <code>*=</code>   <code>/=</code>   <code>%=</code>   <code>//=</code>   <code>**=</code>   <code>&amp;=</code>   <code>|=</code>   <code>^=</code>   <code>&gt;&gt;=</code>   <code>&lt;&lt;=</code></td>\n<td>（复合）赋值运算符</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p><strong>说明：</strong> 在实际开发中，如果搞不清楚运算符的优先级，可以使用括号来确保运算的执行顺序。</p>\n</blockquote>\n<h4 id=\"赋值运算符\"><a class=\"anchor\" href=\"#赋值运算符\">#</a> 赋值运算符</h4>\n<p>赋值运算符应该是最为常见的运算符，它的作用是将右边的值赋给左边的变量。下面的例子演示了赋值运算符和复合赋值运算符的使用。</p>\n<pre><code class=\"language-Python\">&quot;&quot;&quot;\n赋值运算符和复合赋值运算符\n\nVersion: 0.1\nAuthor: 骆昊\n&quot;&quot;&quot;\na = 10\nb = 3\na += b        # 相当于：a = a + b\na *= a + 2    # 相当于：a = a * (a + 2)\nprint(a)      # 算一下这里会输出什么\n</code></pre>\n<h3 id=\"比较运算符和逻辑运算符\"><a class=\"anchor\" href=\"#比较运算符和逻辑运算符\">#</a> 比较运算符和逻辑运算符</h3>\n<p>比较运算符有的地方也称为关系运算符，包括 <code>==</code> 、 <code>!=</code> 、 <code>&lt;</code> 、 <code>&gt;</code> 、 <code>&lt;=</code> 、 <code>&gt;=</code> ，我相信没有什么好解释的，大家一看就能懂，唯一需要提醒的是比较相等用的是 <code>==</code> ，请注意这个地方是两个等号，因为 <code>=</code>  是赋值运算符，我们在上面刚刚讲到过， <code>==</code>  才是比较相等的比较运算符。比较运算符会产生布尔值，要么是 <code>True</code>  要么是 <code>False</code> 。</p>\n<p>逻辑运算符有三个，分别是 <code>and</code> 、 <code>or</code>  和 <code>not</code> 。 <code>and</code>  字面意思是 “而且”，所以 <code>and</code>  运算符会连接两个布尔值，如果两个布尔值都是 <code>True</code> ，那么运算的结果就是 <code>True</code> ；左右两边的布尔值有一个是 <code>False</code> ，最终的运算结果就是 <code>False</code> 。相信大家已经想到了，如果 <code>and</code>  左边的布尔值是 <code>False</code> ，不管右边的布尔值是什么，最终的结果都是 <code>False</code> ，所以在做运算的时候右边的值会被跳过（短路处理），这也就意味着在 <code>and</code>  运算符左边为 <code>False</code>  的情况下，右边的表达式根本不会执行。 <code>or</code>  字面意思是 “或者”，所以 <code>or</code>  运算符也会连接两个布尔值，如果两个布尔值有任意一个是 <code>True</code> ，那么最终的结果就是 <code>True</code> 。当然， <code>or</code>  运算符也是有短路功能的，在它左边的布尔值为 <code>True</code>  的情况下，右边的表达式根本不会执行。 <code>not</code>  运算符的后面会跟上一个布尔值，它的作用是得到与该布尔值相反的值，也就是说，后面的布尔值如果是 <code>True</code>  运算结果就是 <code>False</code> ，而后面的布尔值如果是 <code>False</code>  则运算结果就是 <code>True</code> 。</p>\n<pre><code class=\"language-Python\">&quot;&quot;&quot;\n比较运算符和逻辑运算符的使用\n\nVersion: 0.1\nAuthor: 骆昊\n&quot;&quot;&quot;\nflag0 = 1 == 1\nflag1 = 3 &gt; 2\nflag2 = 2 &lt; 1\nflag3 = flag1 and flag2\nflag4 = flag1 or flag2\nflag5 = not (1 != 2)\nprint('flag0 =', flag0)    # flag0 = True\nprint('flag1 =', flag1)    # flag1 = True\nprint('flag2 =', flag2)    # flag2 = False\nprint('flag3 =', flag3)    # flag3 = False\nprint('flag4 =', flag4)    # flag4 = True\nprint('flag5 =', flag5)    # flag5 = False\n</code></pre>\n<blockquote>\n<p><strong>说明</strong>：比较运算符的优先级高于赋值运算符，所以 <code>flag0 = 1 == 1</code>  先做 <code>1 == 1</code>  产生布尔值 <code>True</code> ，再将这个值赋值给变量 <code>flag0</code> 。 <code>print</code>  函数可以输出多个值，多个值之间可以用 <code>,</code>  进行分隔，输出的内容之间默认以空格分开。</p>\n</blockquote>\n<h3 id=\"练习\"><a class=\"anchor\" href=\"#练习\">#</a> 练习</h3>\n<h4 id=\"练习1华氏温度转换为摄氏温度\"><a class=\"anchor\" href=\"#练习1华氏温度转换为摄氏温度\">#</a> 练习 1：华氏温度转换为摄氏温度。</h4>\n<blockquote>\n<p>提示：华氏温度到摄氏温度的转换公式为：<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>C</mi><mo>=</mo><mo stretchy=\"false\">(</mo><mi>F</mi><mo>−</mo><mn>32</mn><mo stretchy=\"false\">)</mo><mo>÷</mo><mn>1.8</mn></mrow><annotation encoding=\"application/x-tex\">C=(F - 32) \\div 1.8</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.68333em;vertical-align:0em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.07153em;\">C</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2777777777777778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">F</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">3</span><span class=\"mord\">2</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">÷</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">1</span><span class=\"mord\">.</span><span class=\"mord\">8</span></span></span></span>。</p>\n</blockquote>\n<p>参考答案：</p>\n<pre><code class=\"language-Python\">&quot;&quot;&quot;\n将华氏温度转换为摄氏温度\n\nVersion: 0.1\nAuthor: 骆昊\n&quot;&quot;&quot;\nf = float(input('请输入华氏温度: '))\nc = (f - 32) / 1.8\nprint('%.1f华氏度 = %.1f摄氏度' % (f, c))\n</code></pre>\n<blockquote>\n<p><strong>说明</strong>：在使用 <code>print</code>  函数输出时，也可以对字符串内容进行格式化处理，上面 <code>print</code>  函数中的字符串 <code>%1.f</code>  是一个占位符，稍后会由一个 <code>float</code>  类型的变量值替换掉它。同理，如果字符串中有 <code>%d</code> ，后面可以用一个 <code>int</code>  类型的变量值替换掉它，而 <code>%s</code>  会被字符串的值替换掉。除了这种格式化字符串的方式外，还可以用下面的方式来格式化字符串，其中 <code>&#123;f:.1f&#125;</code>  和 <code>&#123;c:.1f&#125;</code>  可以先看成是 <code>&#123;f&#125;</code>  和 <code>&#123;c&#125;</code> ，表示输出时会用变量 <code>f</code>  和变量 <code>c</code>  的值替换掉这两个占位符，后面的 <code>:.1f</code>  表示这是一个浮点数，小数点后保留 1 位有效数字。</p>\n<pre><code class=\"language-Python\">print(f'&#123;f:.1f&#125;华氏度 = &#123;c:.1f&#125;摄氏度')\n</code></pre>\n</blockquote>\n<h4 id=\"练习2输入圆的半径计算计算周长和面积\"><a class=\"anchor\" href=\"#练习2输入圆的半径计算计算周长和面积\">#</a> 练习 2：输入圆的半径计算计算周长和面积。</h4>\n<p>参考答案：</p>\n<pre><code class=\"language-Python\">&quot;&quot;&quot;\n输入半径计算圆的周长和面积\n\nVersion: 0.1\nAuthor: 骆昊\n&quot;&quot;&quot;\nradius = float(input('请输入圆的半径: '))\nperimeter = 2 * 3.1416 * radius\narea = 3.1416 * radius * radius\nprint('周长: %.2f' % perimeter)\nprint('面积: %.2f' % area)\n</code></pre>\n<h4 id=\"练习3输入年份判断是不是闰年\"><a class=\"anchor\" href=\"#练习3输入年份判断是不是闰年\">#</a> 练习 3：输入年份判断是不是闰年。</h4>\n<p>参考答案：</p>\n<pre><code class=\"language-Python\">&quot;&quot;&quot;\n输入年份 如果是闰年输出True 否则输出False\n\nVersion: 0.1\nAuthor: 骆昊\n&quot;&quot;&quot;\nyear = int(input('请输入年份: '))\n# 如果代码太长写成一行不便于阅读 可以使用\\对代码进行折行\nis_leap = year % 4 == 0 and year % 100 != 0 or \\\n          year % 400 == 0\nprint(is_leap)\n</code></pre>\n<blockquote>\n<p><strong>说明</strong>：比较运算符会产生布尔值，而逻辑运算符 <code>and</code>  和 <code>or</code>  会对这些布尔值进行组合，最终也是得到一个布尔值，闰年输出 <code>True</code> ，平年输出 <code>False</code> 。</p>\n</blockquote>\n",
            "tags": [
                "Python",
                "笔记"
            ]
        },
        {
            "id": "https://lxyovo.top/2021-07-15-01.Python",
            "url": "https://lxyovo.top/2021-07-15-01.Python",
            "title": "01-初识Python",
            "date_published": "2021-07-15T08:00:00.000Z",
            "content_html": "<h3 id=\"python简介\"><a class=\"anchor\" href=\"#python简介\">#</a> Python 简介</h3>\n<h4 id=\"python的历史\"><a class=\"anchor\" href=\"#python的历史\">#</a> Python 的历史</h4>\n<ol>\n<li>1989 年圣诞节：Guido von Rossum 开始写 Python 语言的编译器。</li>\n<li>1991 年 2 月：第一个 Python 编译器（同时也是解释器）诞生，它是用 C 语言实现的（后面），可以调用 C 语言的库函数。在最早的版本中，Python 已经提供了对 “类”，“函数”，“异常处理” 等构造块的支持，还有对列表、字典等核心数据类型，同时支持以模块为基础来构造应用程序。</li>\n<li>1994 年 1 月：Python 1.0 正式发布。</li>\n<li>2000 年 10 月 16 日：Python 2.0 发布，增加了完整的<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU1JTlFJTgzJUU1JTlDJUJFJUU1JTlCJTlFJUU2JTk0JUI2XyglRTglQTglODglRTclQUUlOTclRTYlQTklOUYlRTclQTclOTElRTUlQUQlQjgp\">垃圾回收</span>，提供了对<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvVW5pY29kZQ==\"> Unicode</span> 的支持。与此同时，Python 的整个开发过程更加透明，社区对开发进度的影响逐渐扩大，生态圈开始慢慢形成。</li>\n<li>2008 年 12 月 3 日：Python 3.0 发布，它并不完全兼容之前的 Python 代码，不过因为目前还有不少公司在项目和运维中使用 Python 2.x 版本，所以 Python 3.x 的很多新特性后来也被移植到 Python 2.6/2.7 版本中。</li>\n</ol>\n<p>目前我们使用的 Python 3.7.x 的版本是在 2018 年发布的，Python 的版本号分为三段，形如 A.B.C。其中 A 表示大版本号，一般当整体重写，或出现不向后兼容的改变时，增加 A；B 表示功能更新，出现新功能时增加 B；C 表示小的改动（例如：修复了某个 Bug），只要有修改就增加 C。如果对 Python 的历史感兴趣，可以阅读名为<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5jbmJsb2dzLmNvbS92YW1laS9hcmNoaXZlLzIwMTMvMDIvMDYvMjg5MjYyOC5odG1s\">《Python 简史》</span>的网络文章。</p>\n<h4 id=\"python的优缺点\"><a class=\"anchor\" href=\"#python的优缺点\">#</a> Python 的优缺点</h4>\n<p>Python 的优点很多，简单的可以总结为以下几点。</p>\n<ol>\n<li>简单明了，学习曲线低，比很多编程语言都容易上手。</li>\n<li>开放源代码，拥有强大的社区和生态圈，尤其是在数据分析和机器学习领域。</li>\n<li>解释型语言，天生具有平台可移植性，代码可以工作于不同的操作系统。</li>\n<li>对两种主流的编程范式（面向对象编程和函数式编程）都提供了支持。</li>\n<li>代码规范程度高，可读性强，适合有代码洁癖和强迫症的人群。</li>\n</ol>\n<p>Python 的缺点主要集中在以下几点。</p>\n<ol>\n<li>执行效率稍低，对执行效率要求高的部分可以由其他语言（如：C、C++）编写。</li>\n<li>代码无法加密，但是现在很多公司都不销售卖软件而是销售服务，这个问题会被弱化。</li>\n<li>在开发时可以选择的框架太多（如 Web 框架就有 100 多个），有选择的地方就有错误。</li>\n</ol>\n<h4 id=\"python的应用领域\"><a class=\"anchor\" href=\"#python的应用领域\">#</a> Python 的应用领域</h4>\n<p>目前 Python 在 Web 应用后端开发、云基础设施建设、DevOps、网络数据采集（爬虫）、自动化测试、数据分析、机器学习等领域都有着广泛的应用。</p>\n<h3 id=\"安装python解释器\"><a class=\"anchor\" href=\"#安装python解释器\">#</a> 安装 Python 解释器</h3>\n<p>想要开始 Python 编程之旅，首先得在自己使用的计算机上安装 Python 解释器环境，下面将以安装官方的 Python 解释器为例，讲解如何在不同的操作系统上安装 Python 环境。官方的 Python 解释器是用 C 语言实现的，也是使用最为广泛的 Python 解释器，通常称之为 CPython。除此之外，Python 解释器还有 Java 语言实现的 Jython、C# 语言实现的 IronPython 以及 PyPy、Brython、Pyston 等版本，有兴趣的读者可以自行了解。</p>\n<h4 id=\"windows环境\"><a class=\"anchor\" href=\"#windows环境\">#</a> Windows 环境</h4>\n<p>可以在<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucHl0aG9uLm9yZw==\"> Python 官方网站</span>下载到 Python 的 Windows 安装程序（exe 文件），需要注意的是如果在 Windows 7 环境下安装 Python 3.x，需要先安装 Service Pack 1 补丁包（可以通过一些工具软件自动安装系统补丁的功能来安装），安装过程建议勾选 “Add Python 3.x to PATH”（将 Python 3.x 添加到 PATH 环境变量）并选择自定义安装，在设置 “Optional Features” 界面最好将 “pip”、“tcl/tk”、“Python test suite” 等项全部勾选上。强烈建议选择自定义的安装路径并保证路径中没有中文。安装完成会看到 “Setup was successful” 的提示。如果稍后运行 Python 程序时，出现因为缺失一些动态链接库文件而导致 Python 解释器无法工作的问题，可以按照下面的方法加以解决。</p>\n<p>如果系统显示 api-ms-win-crt*.dll 文件缺失，可以参照<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zMjA4NzEzNQ==\">《api-ms-win-crt*.dll 缺失原因分析和解决方法》</span>一文讲解的方法进行处理或者直接在<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubWljcm9zb2Z0LmNvbS96aC1jbi9kb3dubG9hZC9kZXRhaWxzLmFzcHg/aWQ9NDgxNDU=\">微软官网</span>下载 Visual C++ Redistributable for Visual Studio 2015 文件进行修复；如果是因为更新 Windows 的 DirectX 之后导致某些动态链接库文件缺失问题，可以下载一个<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kbC5wY29ubGluZS5jb20uY24vZG93bmxvYWQvMzYwMDc0LTEuaHRtbA==\"> DirectX 修复工具</span>进行修复。</p>\n<h4 id=\"linux环境\"><a class=\"anchor\" href=\"#linux环境\">#</a> Linux 环境</h4>\n<p>Linux 环境自带了 Python 2.x 版本，但是如果要更新到 3.x 的版本，可以在<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucHl0aG9uLm9yZw==\"> Python 的官方网站</span>下载 Python 的源代码并通过源代码构建安装的方式进行安装，具体的步骤如下所示（以 CentOS 为例）。</p>\n<ol>\n<li>安装依赖库（因为没有这些依赖库可能在源代码构件安装时因为缺失底层依赖库而失败）。</li>\n</ol>\n<pre><code class=\"language-Shell\">yum -y install wget gcc zlib-devel bzip2-devel openssl-devel ncurses-devel sqlite-devel readline-devel tk-devel gdbm-devel db4-devel libpcap-devel xz-devel libffi-devel\n</code></pre>\n<ol start=\"2\">\n<li>下载 Python 源代码并解压缩到指定目录。</li>\n</ol>\n<pre><code class=\"language-Shell\">wget https://www.python.org/ftp/python/3.7.6/Python-3.7.6.tar.xz\nxz -d Python-3.7.6.tar.xz\ntar -xvf Python-3.7.6.tar\n</code></pre>\n<ol start=\"3\">\n<li>切换至 Python 源代码目录并执行下面的命令进行配置和安装。</li>\n</ol>\n<pre><code class=\"language-Shell\">cd Python-3.7.6\n./configure --prefix=/usr/local/python37 --enable-optimizations\nmake &amp;&amp; make install\n</code></pre>\n<ol start=\"4\">\n<li>修改用户主目录下名为.bash_profile 的文件，配置 PATH 环境变量并使其生效。</li>\n</ol>\n<pre><code class=\"language-Shell\">cd ~\nvim .bash_profile\n</code></pre>\n<pre><code class=\"language-Shell\"># ... 此处省略上面的代码 ...\n\nexport PATH=$PATH:/usr/local/python37/bin\n\n# ... 此处省略下面的代码 ...\n</code></pre>\n<ol start=\"5\">\n<li>激活环境变量。</li>\n</ol>\n<pre><code class=\"language-Shell\">source .bash_profile\n</code></pre>\n<h4 id=\"macos环境\"><a class=\"anchor\" href=\"#macos环境\">#</a> macOS 环境</h4>\n<p>macOS 也自带了 Python 2.x 版本，可以通过<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucHl0aG9uLm9yZw==\"> Python 的官方网站</span>提供的安装文件（pkg 文件）安装 Python 3.x 的版本。默认安装完成后，可以通过在终端执行 <code>python</code>  命令来启动 2.x 版本的 Python 解释器，启动 3.x 版本的 Python 解释器需要执行 <code>python3</code>  命令。</p>\n<h3 id=\"运行python程序\"><a class=\"anchor\" href=\"#运行python程序\">#</a> 运行 Python 程序</h3>\n<h4 id=\"确认python的版本\"><a class=\"anchor\" href=\"#确认python的版本\">#</a> 确认 Python 的版本</h4>\n<p>可以 Windows 的命令行提示符中键入下面的命令。</p>\n<pre><code class=\"language-Shell\">python --version\n</code></pre>\n<p>在 Linux 或 macOS 系统的终端中键入下面的命令。</p>\n<pre><code class=\"language-Shell\">python3 --version\n</code></pre>\n<p>当然也可以先输入 <code>python</code>  或 <code>python3</code>  进入交互式环境，再执行以下的代码检查 Python 的版本。</p>\n<pre><code class=\"language-Python\">import sys\n\nprint(sys.version_info)\nprint(sys.version)\n</code></pre>\n<h4 id=\"编写python源代码\"><a class=\"anchor\" href=\"#编写python源代码\">#</a> 编写 Python 源代码</h4>\n<p>可以用文本编辑工具（推荐使用<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc3VibGltZXRleHQuY29tLw==\"> Sublime</span>、<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20v\">Visual Studio Code</span> 等高级文本编辑工具）编写 Python 源代码并用 py 作为后缀名保存该文件，代码内容如下所示。</p>\n<pre><code class=\"language-Python\">print('hello, world!')\n</code></pre>\n<h4 id=\"运行程序\"><a class=\"anchor\" href=\"#运行程序\">#</a> 运行程序</h4>\n<p>切换到源代码所在的目录并执行下面的命令，看看屏幕上是否输出了 &quot;hello, world!&quot;。</p>\n<pre><code class=\"language-Shell\">python hello.py\n</code></pre>\n<p>或</p>\n<pre><code class=\"language-Shell\">python3 hello.py\n</code></pre>\n<h4 id=\"代码中的注释\"><a class=\"anchor\" href=\"#代码中的注释\">#</a> 代码中的注释</h4>\n<p>注释是编程语言的一个重要组成部分，用于在源代码中解释代码的作用从而增强程序的可读性和可维护性，当然也可以将源代码中不需要参与运行的代码段通过注释来去掉，这一点在调试程序的时候经常用到。注释在随源代码进入预处理器或编译时会被移除，不会在目标代码中保留也不会影响程序的执行结果。</p>\n<ol>\n<li>单行注释 - 以 #和空格开头的部分</li>\n<li>多行注释 - 三个引号开头，三个引号结尾</li>\n</ol>\n<pre><code class=\"language-Python\">&quot;&quot;&quot;\n第一个Python程序 - hello, world!\n向伟大的Dennis M. Ritchie先生致敬\n\nVersion: 0.1\nAuthor: 骆昊\n&quot;&quot;&quot;\nprint('hello, world!')\n# print(&quot;你好, 世界！&quot;)\n</code></pre>\n<h3 id=\"python开发工具\"><a class=\"anchor\" href=\"#python开发工具\">#</a> Python 开发工具</h3>\n<h4 id=\"idle-自带的集成开发工具\"><a class=\"anchor\" href=\"#idle-自带的集成开发工具\">#</a> IDLE - 自带的集成开发工具</h4>\n<p>IDLE 是安装 Python 环境时自带的集成开发工具，如下图所示。但是由于 IDLE 的用户体验并不是那么好所以很少在实际开发中被采用。</p>\n<p><img data-src=\"./res/python-idle.png\" alt=\"\" /></p>\n<h4 id=\"ipython-更好的交互式编程工具\"><a class=\"anchor\" href=\"#ipython-更好的交互式编程工具\">#</a> IPython - 更好的交互式编程工具</h4>\n<p>IPython 是一种基于 Python 的交互式解释器。相较于原生的 Python 交互式环境，IPython 提供了更为强大的编辑和交互功能。可以通过 Python 的包管理工具 pip 安装 IPython，具体的操作如下所示。</p>\n<pre><code class=\"language-Shell\">pip install ipython\n</code></pre>\n<p>或</p>\n<pre><code class=\"language-Shell\">pip3 install ipython\n</code></pre>\n<p>安装成功后，可以通过下面的 ipython 命令启动 IPython，如下图所示。</p>\n<p><img data-src=\"./res/python-ipython.png\" alt=\"\" /></p>\n<h4 id=\"sublime-text-高级文本编辑器\"><a class=\"anchor\" href=\"#sublime-text-高级文本编辑器\">#</a> Sublime Text - 高级文本编辑器</h4>\n<p><img data-src=\"./res/python-sublime.png\" alt=\"\" /></p>\n<ul>\n<li>\n<p>首先可以通过<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuc3VibGltZXRleHQuY29tLw==\">官方网站</span>下载安装程序安装 Sublime Text 3 或 Sublime Text 2。</p>\n</li>\n<li>\n<p>安装包管理工具。</p>\n<ol>\n<li>通过快捷键 Ctrl+` 或者在 View 菜单中选择 Show Console 打开控制台，输入下面的代码。</li>\n</ol>\n<ul>\n<li>Sublime 3</li>\n</ul>\n<pre><code class=\"language-Python\">import  urllib.request,os;pf='Package Control.sublime-package';ipp=sublime.installed_packages_path();urllib.request.install_opener(urllib.request.build_opener(urllib.request.ProxyHandler()));open(os.path.join(ipp,pf),'wb').write(urllib.request.urlopen('http://sublime.wbond.net/'+pf.replace(' ','%20')).read())\n</code></pre>\n<ul>\n<li>Sublime 2</li>\n</ul>\n<pre><code class=\"language-Python\">import  urllib2,os;pf='Package Control.sublime-package';ipp=sublime.installed_packages_path();os.makedirs(ipp)ifnotos.path.exists(ipp)elseNone;urllib2.install_opener(urllib2.build_opener(urllib2.ProxyHandler()));open(os.path.join(ipp,pf),'wb').write(urllib2.urlopen('http://sublime.wbond.net/'+pf.replace(' ','%20')).read());print('Please restart Sublime Text to finish installation')\n</code></pre>\n<ol start=\"2\">\n<li>在浏览器中输入  <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zdWJsaW1lLndib25kLm5ldC9QYWNrYWdlJTIwQ29udHJvbC5zdWJsaW1lLXBhY2thZ2U=\">https://sublime.wbond.net/Package Control.sublime-package</span> 下载包管理工具的安装包，并找到安装 Sublime 目录下名为 &quot;Installed Packages&quot; 的目录，把刚才下载的文件放到这个文件加下，然后重启 Sublime Text 就搞定了。</li>\n</ol>\n</li>\n<li>\n<p>安装插件。通过 Preference 菜单的 Package Control 或快捷键 Ctrl+Shift+P 打开命令面板，在面板中输入 Install Package 就可以找到安装插件的工具，然后再查找需要的插件。我们推荐大家安装以下几个插件：</p>\n<ul>\n<li>SublimeCodeIntel - 代码自动补全工具插件。</li>\n<li>Emmet - 前端开发代码模板插件。</li>\n<li>Git - 版本控制工具插件。</li>\n<li>Python PEP8 Autoformat - PEP8 规范自动格式化插件。</li>\n<li>ConvertToUTF8 - 将本地编码转换为 UTF-8。</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p><strong>说明</strong>：事实上<span class=\"exturl\" data-url=\"aHR0cHM6Ly9jb2RlLnZpc3VhbHN0dWRpby5jb20v\"> Visual Studio Code</span> 可能是更好的选择，它不用花钱并提供了更为完整和强大的功能，有兴趣的读者可以自行研究。</p>\n</blockquote>\n<h4 id=\"pycharm-python开发神器\"><a class=\"anchor\" href=\"#pycharm-python开发神器\">#</a> PyCharm - Python 开发神器</h4>\n<p>PyCharm 的安装、配置和使用在<a href=\"../%E7%8E%A9%E8%BD%ACPyCharm.md\">《玩转 PyCharm》</a>进行了介绍，有兴趣的读者可以选择阅读。</p>\n<p><img data-src=\"./res/python-pycharm.png\" alt=\"\" /></p>\n<h3 id=\"练习\"><a class=\"anchor\" href=\"#练习\">#</a> 练习</h3>\n<ol>\n<li>\n<p>在 Python 交互式环境中输入下面的代码并查看结果，请尝试将看到的内容翻译成中文。</p>\n<pre><code class=\"language-Python\">import this\n</code></pre>\n<blockquote>\n<p><strong>说明</strong>：输入上面的代码，在 Python 的交互式环境中可以看到 Tim Peter 撰写的<a href=\"../Python%E4%B9%8B%E7%A6%85.md\"> “Python 之禅”</a>，里面讲述的道理不仅仅适用于 Python，也适用于其他编程语言。</p>\n</blockquote>\n</li>\n<li>\n<p>学习使用 turtle 在屏幕上绘制图形。</p>\n<blockquote>\n<p><strong>说明</strong>：turtle 是 Python 内置的一个非常有趣的模块，特别适合对计算机程序设计进行初体验的小伙伴，它最早是 Logo 语言的一部分，Logo 语言是 Wally Feurzig 和 Seymour Papert 在 1966 发明的编程语言。</p>\n</blockquote>\n<pre><code class=\"language-Python\">import turtle\n\nturtle.pensize(4)\nturtle.pencolor('red')\n\nturtle.forward(100)\nturtle.right(90)\nturtle.forward(100)\nturtle.right(90)\nturtle.forward(100)\nturtle.right(90)\nturtle.forward(100)\n\nturtle.mainloop()\n</code></pre>\n<blockquote>\n<p><strong>提示</strong>：本章提供的代码中还有画国旗和画小猪佩奇的代码，有兴趣的读者请自行研究。</p>\n</blockquote>\n</li>\n</ol>\n",
            "tags": [
                "Python",
                "笔记"
            ]
        }
    ]
}